@{
    ViewData["Title"] = "Update Password";
}

<div class="mt-4">
    <div class="px-5">
        <form method="post" asp-action="UpdatePassword">
            <h1>Update Password</h1>
            <div class="mb-3">
                <label for="password-input" class="form-label">Password</label>
                <div class="input-group">
                    <input id="password-input" name="password" type="password" class="form-control"/>
                    <button id="show-password-btn" class="btn btn-outline-secondary" type="button">
                        <i class="bi bi-eye"></i>
                    </button>
                </div>
            </div>
            <div class="mb-3">
                <label for="confirm-password-input" class="form-label">Confirm Password</label>
                <div class="input-group">
                    <input id="confirm-password-input" name="confirm-password" type="password" class="form-control"/>
                    <button id="show-confirm-password-btn" class="btn btn-outline-secondary" type="button">
                        <i class="bi bi-eye"></i>
                    </button>
                </div>
            </div>
            <div id="error-messages" class="alert alert-danger">
                <div id="lengthMessage" class="text-danger">
                    Password must be at least 8 characters long
                </div>
                <div id="lowercaseMessage" class="text-danger">
                    Password must contain at least one lowercase letter
                </div>
                <div id="uppercaseMessage" class="text-danger">
                    Password must contain at least one uppercase letter
                </div>
                <div id="numberMessage" class="text-danger">
                    Password must contain at least one number
                </div>
                <div id="symbolMessage" class="text-danger">
                    Password must contain at least one symbol
                </div>
                <div id="passwordsEqualMessage" class="text-danger">
                    The passwords must be equal
                </div>
            </div>
            <div>
                <button id="save-btn" class="btn btn-success" disabled>Save</button>
            </div>
        </form>
    </div>
</div>

@section Scripts
{
    <script>
        //#region Password Validation
        const passwordInput = document.getElementById('password-input');
        const confirmPasswordInput = document.getElementById('confirm-password-input');
        
        const validators = {
            hasMinLength: (password) => password.length >= 8,
            hasLowercase: (password) => /[a-z]/.test(password),
            hasUppercase: (password) => /[A-Z]/.test(password),
            hasNumber: (password) => /\d/.test(password),
            hasSymbol: (password) => /[^a-zA-Z0-9]/.test(password),
            passwordEqual: (password, confirmPassword) => password === confirmPassword 
        };

        const messages = {
            minLength: document.getElementById('lengthMessage'),
            hasLowercase: document.getElementById('lowercaseMessage'),
            hasUppercase: document.getElementById('uppercaseMessage'),
            hasNumber: document.getElementById('numberMessage'),
            hasSymbol: document.getElementById('symbolMessage'),
            passwordEqual: document.getElementById('passwordsEqualMessage')
        };

        function updateValidationMessages(password, confirmPassword) {
            const results = {
                minLength: validators.hasMinLength(password),
                hasLowercase: validators.hasLowercase(password),
                hasUppercase: validators.hasUppercase(password),
                hasNumber: validators.hasNumber(password),
                hasSymbol: validators.hasSymbol(password),
                passwordEqual: validators.passwordEqual(password, confirmPassword)
            };
            
            Object.keys(results).forEach(key => {
                const messageElement = messages[key];
                messageElement.classList.remove('d-none');

                if (results[key]) {
                    messageElement.classList.add('d-none');
                }
            });
            
            const errorMessagesAlert = document.getElementById('error-messages'); 
            const saveButton = document.getElementById('save-btn');
            
            if (Object.values(results).every(Boolean)) {
                saveButton.removeAttribute('disabled');
                errorMessagesAlert.classList.add('d-none');
            } else {
                saveButton.setAttribute('disabled', "true");
                errorMessagesAlert.classList.remove('d-none');
            }
        }
        
        passwordInput.addEventListener('input', function(e) {
            updateValidationMessages(e.target.value, confirmPasswordInput.value);
        });

        confirmPasswordInput.addEventListener('input', function (e) {
            updateValidationMessages(passwordInput.value,  e.target.value);
        });
        //#endregion

        //#region Password Visibility
        document.getElementById('show-password-btn').addEventListener('click', function () {
            togglePasswordVisibility('password-input')
        });
        
        document.getElementById('show-confirm-password-btn').addEventListener('click', function () {
            togglePasswordVisibility('confirm-password-input')
        });
        //#endregion
    </script>
}
